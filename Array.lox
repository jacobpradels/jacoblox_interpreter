fun println(in) {
    print in;
    print "\n";
}

fun printr(in) {
    print in;
}


class ArrayNode {
    init(prev, next, value) {
        this.prev = prev;
        this.next = next;
        this.value = value;
    }
}

class Array {
    init(value) {
        if (value)
        {
            this.head = ArrayNode(nil,nil,value);
            this.StringRep = this.display();
        } else {
            this.head = nil;
            this.StringRep = "[]";
        }
        this.length = 1;
    }

    display() {
        var curr = this.head;
        var final = "";
        final = final + "[";
        while (curr.next != nil) {
            final = final + curr.value + ",";
            curr = curr.next;
        }
        final = final + curr.value + "]";
        return final;
    }

    get(n) {
        var curr = this.head;
        for (var x = 0; x < n; x = x + 1) {
            if (curr.next != nil) {
                curr = curr.next;
            } else {
                return nil;
            }
        }
        return curr.value;
    }

    get_first(n) {
        var curr = this.head;
        var counter = 0;
        while (curr != nil) {
            if (curr.value == n) {
                return counter;
            } else {
                counter = counter + 1;
                curr = curr.next;
            }
        }
        return nil;
    }

    set(n,value) {
        fun getNode(node, n) {
            if (n == 0) {
                return node;
            } else {
                return getNode(node.next, n-1);
            }
        }
        var node = getNode(this.head,n);
        node.value = value;
        this.StringRep = this.display();
    }

    append(value) {
        // Empty list case.
        if (this.head == nil) {
            this.head = ArrayNode(nil,nil,value);
        // Non-empty list case.
        } else {
            var curr = this.head;
            while (curr.next != nil) {
                curr = curr.next;
            }
            curr.next = ArrayNode(curr,nil,value);
        }
        this.StringRep = this.display();
    }
}

class Dictionary {
    class DictionaryItem {
        init(key,value) {
            this.key = key;
            this.value = value;
        }
    }

    init(key,value) {
        
    }
}