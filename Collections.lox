class Collections {
    init(size) {
        this.offset = stack_trace;
        stack_trace = stack_trace + size;
        this.MemoryController = mem(this.offset,this.offset + size);
    }

    get(location) {
        return this.MemoryController("r",this.offset + location,nil);
    }
    
    set(location,data) {
        return this.MemoryController("w",this.offset + location,data);
    }
}

class Array < Collections {
    init(size) {
        super.init(size);
        this.size = size;
        this.StringRep = this.display();
    }

    append(value) {
        for (var x = 0; x < this.size; x = x + 1) {
            if (this.get(x) == nil) {
                this.set(x,value);
                this.StringRep = this.display();
                return;
            }
        }
        print "WARNING: Appending to full array.  Append failed. \n";
    }
    
    set(location,data) {
        super.set(location,data);
        this.StringRep = this.display();
    }

    display() {
        if (this.size == 0) {
            return "[]";
        }
        var final = "";
        final = final + "[";
        for (var index = 0; index < this.size - 1; index = index + 1) {
            // final = final + 0 + ",";
            final = final + this.get(index) + ", ";
        }
        final = final + this.get(this.size - 1) + "]";
        return final;
    }

    slice(start, end) {
        var size = end-start;
        var newArray = Array(size);
        for (var x = start; x < end; x = x + 1) {
            newArray.append(this.get(x));
        }
        return newArray;
    }

    concat(Arr) {
        var total_size = this.size + Arr.size;
        var newArr = Array(total_size);
        for (var x = 0; x < this.size; x = x + 1) {
            newArr.append(this.get(x));
        }
        for (var x = 0; x < Arr.size; x = x + 1) {
            newArr.append(Arr.get(x));
        }
        return newArr;
    }

    find(value) {
        // Binary Search for value
        var sorted_arr = sort(this);
        var low = 0;
        var high = sorted_arr.size - 1;
        var mid;
        while (low <= high) {
            mid = round((low + high) / 2);
            if (sorted_arr.get(mid) == value) {
                return mid;
            }
            if (sorted_arr.get(mid) < value) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;
    }
}

fun sort(arr) {
    // Quicksort
    if (arr.size <= 1) {
        return arr;
    }

    var pivot = arr.get(arr.size / 2);
    var p_arr = Array(1);
    p_arr.append(pivot);
    var left_size = 0;
    var right_size = 0;
    for (var x = 0; x < arr.size; x = x + 1) {
        if (arr.get(x) < pivot) {
            left_size = left_size + 1;
        }
        if (arr.get(x) > pivot) {
            right_size = right_size + 1;
        }
    }
    var left = Array(left_size);
    var right = Array(right_size);
    for (var x = 0; x < arr.size; x = x + 1) {
        if (arr.get(x) < pivot) {
            left.append(arr.get(x));
        }
        if (arr.get(x) > pivot) {
            right.append(arr.get(x));
        }
    }
    left = sort(left);
    right = sort(right);
    left = left.concat(p_arr);
    left = left.concat(right);
    return left;
}